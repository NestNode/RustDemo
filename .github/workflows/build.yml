name: Build Release Binaries

on:
  push:
    # tags: ["v*"]  # 在打版本标签时触发构建
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # x86_64 目标
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl  # 静态链接 Linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc      # Windows
          - os: macos-latest
            target: x86_64-apple-darwin         # macOS
          # ARM 目标（可选）
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-musl  # ARM Linux
          - os: macos-latest
            target: aarch64-apple-darwin        # ARM macOS

    steps:
      - name: 01. Checkout code
        uses: actions/checkout@v4

      - name: 02. Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          profile: minimal

      - name: 04. Build Release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Artifacts
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${APP_NAME}* release/
          # Windows 可执行文件后缀处理
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            mv release/${APP_NAME}.exe release/${APP_NAME}-${{ matrix.target }}.exe
          else
            mv release/${APP_NAME} release/${APP_NAME}-${{ matrix.target }}
          fi
        env:
          APP_NAME: your_app_name  # 替换为你的应用名称

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: release/
